#!/usr/bin/env python
import PyQt5.QtCore as Qc
import PyQt5.QtGui as Qg
import PyQt5.QtWidgets as Qw
import main_rc
from sofos import qt
from sofos import models as sofosmd
from sofos import create_database as cd
from settings import setup
import models as md


class MainWindow(Qw.QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.tables = sofosmd.model_tables(md)
        self.settings = Qc.QSettings()
        self.mdiArea = Qw.QMdiArea()
        self.mdiArea.setHorizontalScrollBarPolicy(Qc.Qt.ScrollBarAsNeeded)
        self.mdiArea.setVerticalScrollBarPolicy(Qc.Qt.ScrollBarAsNeeded)
        self.setCentralWidget(self.mdiArea)
        self.mdiArea.subWindowActivated.connect(self.updateMenus)
        self.windowMapper = Qc.QSignalMapper(self)
        self.windowMapper.mapped[Qw.QWidget].connect(self.setActiveSubWindow)
        self.createActions()
        self.createMenus()
        self.createToolBars()
        self.createStatusBar()
        self.updateMenus()
        self.readSettings()
        self.setWindowTitle('%s %s' % (setup['application_title'], self.dbf))

    def closeEvent(self, event):
        self.mdiArea.closeAllSubWindows()
        if self.mdiArea.currentSubWindow():
            event.ignore()
        else:
            self.writeSettings()
            event.accept()

    def newFile(self):
        options = Qw.QFileDialog.Options()
        filename, _ = Qw.QFileDialog.getSaveFileName(self,
                "Create New Database",
                '',
                "sql3 App Files (*.sql3)", options=options)
        if filename:
            cd.create_tables(filename, md)
            # self.dbf = filename
        self.setWindowTitle('%s %s' % (setup['application_title'], self.dbf))

    def newFiled(self, tbl):
        print(tbl)
        child = self.createMdiChild()
        # child.newFile()
        child.show()

    def open(self):
        filename, _ = Qw.QFileDialog.getOpenFileName(self,
        'Open database', self.dbf, "sql3 App Files (*.sql3)")
        if filename:
            print(filename)
            # self.dbf = filename

    def save(self):
        if self.activeMdiChild() and self.activeMdiChild().save():
            self.statusBar().showMessage("File saved", 2000)

    def saveAs(self):
        if self.activeMdiChild() and self.activeMdiChild().saveAs():
            self.statusBar().showMessage("File saved", 2000)

    def cut(self):
        if self.activeMdiChild():
            self.activeMdiChild().cut()

    def copy(self):
        if self.activeMdiChild():
            self.activeMdiChild().copy()

    def paste(self):
        if self.activeMdiChild():
            self.activeMdiChild().paste()

    def about(self):
        Qw.QMessageBox.about(self, "About MDI",
                "The <b>MDI</b> example demonstrates how to write multiple "
                "document interface applications using Qt.")

    def updateMenus(self):
        hasMdiChild = (self.activeMdiChild() is not None)
        self.saveAct.setEnabled(hasMdiChild)
        self.saveAsAct.setEnabled(hasMdiChild)
        self.pasteAct.setEnabled(hasMdiChild)
        self.closeAct.setEnabled(hasMdiChild)
        self.closeAllAct.setEnabled(hasMdiChild)
        self.tileAct.setEnabled(hasMdiChild)
        self.cascadeAct.setEnabled(hasMdiChild)
        self.nextAct.setEnabled(hasMdiChild)
        self.previousAct.setEnabled(hasMdiChild)
        self.separatorAct.setVisible(hasMdiChild)

        # hasSelection = (self.activeMdiChild() is not None and
        #                 self.activeMdiChild().textCursor().hasSelection())
        hasSelection = False
        self.cutAct.setEnabled(hasSelection)
        self.copyAct.setEnabled(hasSelection)

    def updateWindowMenu(self):
        self.windowMenu.clear()
        self.windowMenu.addAction(self.closeAct)
        self.windowMenu.addAction(self.closeAllAct)
        self.windowMenu.addSeparator()
        self.windowMenu.addAction(self.tileAct)
        self.windowMenu.addAction(self.cascadeAct)
        self.windowMenu.addSeparator()
        self.windowMenu.addAction(self.nextAct)
        self.windowMenu.addAction(self.previousAct)
        self.windowMenu.addAction(self.separatorAct)

        windows = self.mdiArea.subWindowList()
        self.separatorAct.setVisible(len(windows) != 0)

        for i, window in enumerate(windows):
            child = window.widget()

            text = "%d %s" % (i + 1, child.userFriendlyCurrentFile())
            if i < 9:
                text = '&' + text

            action = self.windowMenu.addAction(text)
            action.setCheckable(True)
            action.setChecked(child is self.activeMdiChild())
            action.triggered.connect(self.windowMapper.map)
            self.windowMapper.setMapping(action, window)

    def createMdiChild(self):
        child = qt.AutoFormTable(self.dbf, 'trand')
        self.mdiArea.addSubWindow(child)
        #child.copyAvailable.connect(self.cutAct.setEnabled)
        #child.copyAvailable.connect(self.copyAct.setEnabled)
        return child

    def createActions(self):
        self.newAct = Qw.QAction(Qg.QIcon(':/images/new.png'),
                                 "&New",
                                 self,
                                 shortcut=Qg.QKeySequence.New,
                                 statusTip="Create a new database",
                                 triggered=self.newFile)

        self.openAct = Qw.QAction(Qg.QIcon(':/images/open.png'),
                                  "&Open...",
                                  self,
                                  shortcut=Qg.QKeySequence.Open,
                                  statusTip="Open an existing database",
                                  triggered=self.open)

        self.saveAct = Qw.QAction(Qg.QIcon(':/images/save.png'),
                                  "&Save",
                                  self,
                                  shortcut=Qg.QKeySequence.Save,
                                  statusTip="Save the document to disk",
                                  triggered=self.save)

        self.saveAsAct = Qw.QAction("Save &As...",
                                    self,
                                    shortcut=Qg.QKeySequence.SaveAs,
                                    statusTip="Save the document under a new name",
                                    triggered=self.saveAs)

        self.exitAct = Qw.QAction("E&xit",
                                  self,
                                  shortcut=Qg.QKeySequence.Quit,
                                  statusTip="Exit the application",
                                  triggered=Qw.QApplication.instance().closeAllWindows)

        self.cutAct = Qw.QAction(Qg.QIcon(':/images/cut.png'),
                                 "Cu&t",
                                 self,
                                 shortcut=Qg.QKeySequence.Cut,
                                 statusTip="Cut the current selection's contents to the clipboard",
                                 triggered=self.cut)

        self.copyAct = Qw.QAction(Qg.QIcon(':/images/copy.png'),
                                  "&Copy",
                                  self,
                                  shortcut=Qg.QKeySequence.Copy,
                                  statusTip="Copy the current selection's contents to the clipboard",
                                  triggered=self.copy)

        self.pasteAct = Qw.QAction(Qg.QIcon(':/images/paste.png'),
                                   "&Paste",
                                   self,
                                   shortcut=Qg.QKeySequence.Paste,
                                   statusTip="Paste the clipboard's contents into the current selection",
                                   triggered=self.paste)

        self.closeAct = Qw.QAction("Cl&ose",
                                   self,
                                   statusTip="Close the active window",
                                   triggered=self.mdiArea.closeActiveSubWindow)

        self.closeAllAct = Qw.QAction("Close &All",
                                      self,
                                      statusTip="Close all the windows",
                                      triggered=self.mdiArea.closeAllSubWindows)

        self.tileAct = Qw.QAction("&Tile",
                                  self,
                                  statusTip="Tile the windows",
                                  triggered=self.mdiArea.tileSubWindows)

        self.cascadeAct = Qw.QAction("&Cascade",
                                     self,
                                     statusTip="Cascade the windows",
                                     triggered=self.mdiArea.cascadeSubWindows)

        self.nextAct = Qw.QAction("Ne&xt",
                                  self,
                                  shortcut=Qg.QKeySequence.NextChild,
                                  statusTip="Move the focus to the next window",
                                  triggered=self.mdiArea.activateNextSubWindow)

        self.previousAct = Qw.QAction("Pre&vious", self,
                shortcut=Qg.QKeySequence.PreviousChild,
                statusTip="Move the focus to the previous window",
                triggered=self.mdiArea.activatePreviousSubWindow)

        self.separatorAct = Qw.QAction(self)
        self.separatorAct.setSeparator(True)

        self.aboutAct = Qw.QAction("&About", self,
                statusTip="Show the application's About box",
                triggered=self.about)

        self.aboutQtAct = Qw.QAction("About &Qt", self,
                statusTip="Show the Qt library's About box",
                triggered=Qw.QApplication.instance().aboutQt)

        self.tblact = {}
        self.mapper = {}
        for tbl in self.tables:
            self.mapper[tbl] = Qc.QSignalMapper(self)
            self.tblact[tbl] = Qw.QAction(tbl, self)
            self.mapper[tbl].setMapping(self.tblact[tbl], tbl)
            self.tblact[tbl].triggered.connect(self.mapper[tbl].map)
            self.mapper[tbl].mapped['QString'].connect(self.newFiled)
            # self.tblact[tbl] = Qw.QAction('%stab' % tbl,
            #                               self,
            #                               statusTip='Table %s' % tbl,
            #                               triggered=self.newFiled)

    def createMenus(self):
        self.fileMenu = self.menuBar().addMenu("&File")
        self.fileMenu.addAction(self.newAct)
        self.fileMenu.addAction(self.openAct)
        self.fileMenu.addAction(self.saveAct)
        self.fileMenu.addAction(self.saveAsAct)
        self.fileMenu.addSeparator()
        action = self.fileMenu.addAction("Switch layout direction")
        action.triggered.connect(self.switchLayoutDirection)
        self.fileMenu.addAction(self.exitAct)

        self.editMenu = self.menuBar().addMenu("&Edit")
        self.editMenu.addAction(self.cutAct)
        self.editMenu.addAction(self.copyAct)
        self.editMenu.addAction(self.pasteAct)

        self.windowMenu = self.menuBar().addMenu("&Window")
        self.updateWindowMenu()
        self.windowMenu.aboutToShow.connect(self.updateWindowMenu)

        self.tablemenu = self.menuBar().addMenu("&Tables")
        for act in self.tblact:
            self.tablemenu.addAction(self.tblact[act])

        self.menuBar().addSeparator()

        self.helpMenu = self.menuBar().addMenu("&Help")
        self.helpMenu.addAction(self.aboutAct)
        self.helpMenu.addAction(self.aboutQtAct)

    def createToolBars(self):
        self.fileToolBar = self.addToolBar("File")
        self.fileToolBar.addAction(self.newAct)
        self.fileToolBar.addAction(self.openAct)
        self.fileToolBar.addAction(self.saveAct)

        self.editToolBar = self.addToolBar("Edit")
        self.editToolBar.addAction(self.cutAct)
        self.editToolBar.addAction(self.copyAct)
        self.editToolBar.addAction(self.pasteAct)

    def createStatusBar(self):
        self.statusBar().showMessage("Ready")

    def readSettings(self):
        self.dbf = self.settings.value("dbf", defaultValue=setup['dbf'])
        pos = self.settings.value('pos', Qc.QPoint(200, 200))
        size = self.settings.value('size', Qc.QSize(400, 400))
        self.move(pos)
        self.resize(size)

    def writeSettings(self):
        self.settings.setValue('dbf', self.dbf)
        self.settings.setValue('pos', self.pos())
        self.settings.setValue('size', self.size())

    def activeMdiChild(self):
        activeSubWindow = self.mdiArea.activeSubWindow()
        if activeSubWindow:
            return activeSubWindow.widget()
        return None

    def findMdiChild(self, fileName):
        canonicalFilePath = Qc.QFileInfo(fileName).canonicalFilePath()
        for window in self.mdiArea.subWindowList():
            if window.widget().currentFile() == canonicalFilePath:
                return window
        return None

    def switchLayoutDirection(self):
        if self.layoutDirection() == Qc.Qt.LeftToRight:
            Qw.QApplication.setLayoutDirection(Qc.Qt.RightToLeft)
        else:
            Qw.QApplication.setLayoutDirection(Qc.Qt.LeftToRight)

    def setActiveSubWindow(self, window):
        if window:
            self.mdiArea.setActiveSubWindow(window)


if __name__ == '__main__':
    import sys
    app = Qw.QApplication(sys.argv)
    app.setOrganizationName(setup["organization_name"])
    app.setOrganizationDomain(setup["organization_domain"])
    app.setApplicationName(setup["application_name"])
    mainWin = MainWindow()
    mainWin.show()
    sys.exit(app.exec_())
